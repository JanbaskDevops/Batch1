# Step1 Docker must be installed
# Link https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl

apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
apt-get install -y apt-transport-https ca-certificates curl gpg -y

mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key |  gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list

apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl



# Installing GO version 20
wget https://golang.org/dl/go1.20.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.20.linux-amd64.tar.gz
echo "export PATH=\$PATH:/usr/local/go/bin" >> ~/.profile
source ~/.profile

wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.0/cri-dockerd-v0.2.0-linux-amd64.tar.gz
tar xvf cri-dockerd-v0.2.0-linux-amd64.tar.gz
mv ./cri-dockerd /usr/local/bin/ 


kubeadm init --cri-socket unix:///var/run/cri-dockerd.sock
#kubeadm init
#kubeadm init --ignore-preflight-errors=Swap --ignore-preflight-errors=NumCPU

Solution for container not running
==================================
sudo rm /etc/containerd/config.toml
sudo systemctl restart containerd
sudo kubeadm init 

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.0.5:6443 --token f9zz3v.zlm2l3ki8jmiso9z \
        --discovery-token-ca-cert-hash sha256:0f95d518a316f089a5ce3b74079e08421e454ec0b6c7ecadb645d5e11690af81


kubectl apply -f [podnetwork].yaml
â€˜kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

kubectl get events --all-namespaces  --sort-by='.metadata.creationTimestamp'

kubectl get pods -n kube-system -o wide








