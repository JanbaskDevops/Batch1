Azure DevOps[Agent> self hosted, Microsoft hosted] > Azure VM

Docker, K8s, Helmchart > AKS[Azure Kubernetes services]

ARM template

Terraform(6-7) > Azure/AWS

ARM template > 2 classes

1 Class: Storage

2 Class: Networking

1 Class Monitoring[Splunk] > Azure monitoring

1-2 around Platform as service: Azure App service, FAAS

Interview
=========
Terraform> 10 interview question
CPU
===
Arthmatic, logical and Input output operation.
How to check how many CPU's we are having > lscpu[list CPU]

RAM
===
> It's A memory which is needed to execute any program.
> Any data which we want to access has to load in the RAM.

How to check RAM> free -k|-m|-g

ubuntu $ free -k
              total        used        free      shared  buff/cache   available
Mem:        2030940      264004      377604        1016     1389332     1569792
Swap:       1048572           0     1048572
ubuntu $ free -m
              total        used        free      shared  buff/cache   available
Mem:           1983         257         368           0        1356        1532
Swap:          1023           0        1023
ubuntu $ free -g
              total        used        free      shared  buff/cache   available
Mem:              1           0           0           0           1           1
Swap:             0           0           0

Clear command: It will clear the terminal

Storage
=======
Stuctured data> 

Unstuctred> other than structured everything is unstructured.

It's a place where we store our data[permanetly]

Blob: for unstructured Data
File: 
Queue:
Database

For any application calculate memory and CPU usage?
===================================================

int a,b,c; #2 byte integer
c=a+b;
printf(%d,c)

Memory= 6 Byte + 2 Byte(CPU call for printf) = 8 byte
CPU= 

At a time 100 users can use this application > 100 threds

Sustanable application Design
=============================
1) Facebook > 1000M
2) Amazon on big billion day | Diwali Day | chrimax day

let say 1 server can support 100 users, and when my server utilization reaches to 80%[80 thread], I will add 1 more server, and when utilization is 30%, one server will be decommission

These kind of design where my server count is not impact my application is known as sustainable application design.

Life cycle
=========
Birth[Precurement]  > Death[Decom]

How development team is working
=================================
> Spoon feeding is not a development culture. development team will share one page which has details.

Spring Petclinic is a Spring Boot application built using Maven or Gradle. You can build a jar file and run it from the command line (it should work just as well with Java 17 or newer):

git clone https://github.com/spring-projects/spring-petclinic.git
cd spring-petclinic
./mvnw package
java -jar target/*.jar

Ubuntu vs Linux
===============
in 1950 communication was unidirection.

to convert unidirection communication to bi direction, they has develop one control system known as [Assembly,B]

IBMi > https://www.ibm.com/docs/en/zos/2.4.0?topic=commands-list-tsoe
Redhat 

Linux= Unix + Utilities[command developed by IBM]

What is utilities
=================
it's tool that we use for a specific purpose.
Example:1) Terraform
        2) TSOM

Linux is not free.

Open source
===========
Where source code is available with anyone
Example: Spring pet clinic

Provisioning
============
When we install any software that is known as provisioning.

How to read software version:  <Major-release>.<Minor-release>.<fix-pack>

How to install java?
====================
java --version #To check if java installed or not

ubuntu $ java --version

Command 'java' not found, but can be installed with:

apt install openjdk-11-jre-headless  # version 11.0.20.1+1-0ubuntu1~20.04, or
apt install default-jre              # version 2:1.11-72
apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04
apt install openjdk-17-jre-headless  # version 17.0.8.1+1~us1-0ubuntu1~20.04
apt install openjdk-8-jre-headless   # version 8u382-ga-1~20.04.1
apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04

Monolithic[tightly coupled] vs microservices[loosely coupled]
=============================================================
Agile Methodology[How we are saving the cost]
   TDD, BDD and FDD
Monolithic application
Microservices application
Docker[Microservice application tool]
Docker installation, and writing first image with docker
